package SR_AckTimeout;


import ikr.simlib.entities.Entity;
import ikr.simlib.events.calendar.Calendar;
import ikr.simlib.events.time.PointInTime;
import ikr.simlib.messages.LabelMessage;
import ikr.simlib.messages.Message;
import ikr.simlib.model.SimNode;
import ikr.simlib.ports.input.InputPort;
import ikr.simlib.ports.output.OutputPort;
import ikr.simlib.ports.output.SynchronousOutputPort;
import ikr.simlib.random.StdRandomNumberGenerator;

public class Receiver extends Entity{
  
  private final InputPort in;
  private final SynchronousOutputPort sinkOut;
  private final SynchronousOutputPort out;
  private int id;
  private LabelMessage m;
  private int ackCounter;

  public Receiver(SimNode ownNode, final double dropPrbability) {
    super(ownNode);

    this.sinkOut = new SynchronousOutputPort(this);
    this.out = new SynchronousOutputPort(this);  
    this.ackCounter = 0;

    final StdRandomNumberGenerator r = new StdRandomNumberGenerator();

    this.in = new InputPort(this) {
    	@Override
    	protected void handleMessageIndication(Message msg) {
    		m = (LabelMessage) in.getMessage();
    		id = m.getLabel(); 

    		if(r.next() < 1-dropPrbability) {
    			if (ackCounter<id){
    				System.out.println(String.format("%.3f", Calendar.getInstance().getSystemTime().toMilliSeconds()) + "ms, Receiver Send Ack with Label: " + String.valueOf(id));
        			out.sendMessage(new AckMessage(true, id));
        			sinkOut.sendMessage(m);
        			ackCounter++;
    			}else{
    				System.out.println(String.format("%.3f", Calendar.getInstance().getSystemTime().toMilliSeconds()) + "ms, duplicated received message"+ String.valueOf(id));
    			}
    		}else{
    		System.out.println(String.format("%.3f", Calendar.getInstance().getSystemTime().toMilliSeconds()) 
    							+ "ms, message " + String.valueOf(id)+" droped");
    		}
    	}
    };
  }

  
  public InputPort getInput() {
	  return this.in;
  }
  
  public OutputPort getOutputSink() {
	  return this.sinkOut;
  }
  
  public OutputPort getOutput(){
	  return this.out;
  }
}
